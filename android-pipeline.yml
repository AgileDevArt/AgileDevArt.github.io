trigger:
- master

name: $(rev:r)
stages:
- stage: 'Unity_Build'
  displayName: 'Build Unity Project'
  jobs: 
  - job: 'Unity_Build_Mobile'
    displayName: 'Unity Build Android'
    pool:
      vmImage: 'macOS-13'

    variables:
      PRODUCT_NAME: 'MyApp'
      PRODUCT_IDENTIFIER: 'com.company.myapp'
      UNITY_PATH: '/Applications/Unity/Unity.app/Contents/MacOS/Unity'
      # USERNAME: ***
      # PASSWORD: ***

    steps:
    - checkout: self

    - task: CmdLine@2
      displayName: 'Installing Packages'
      inputs:
        script: |
          brew install md5sha1sum

          curl -O https://download.unity3d.com/download_unity/001fa5a8e29a/MacEditorInstaller/Unity-6000.0.22f1.pkg
          sudo installer -verboseR -pkg Unity-6000.0.22f1.pkg -target /
          rm Unity-6000.0.22f1.pkg

          curl -O https://download.unity3d.com/download_unity/001fa5a8e29a/MacEditorTargetInstaller/UnitySetup-Android-Support-for-Editor-6000.0.22f1.pkg
          sudo installer -verboseR -pkg UnitySetup-Android-Support-for-Editor-6000.0.22f1.pkg -target /
          rm UnitySetup-Android-Support-for-Editor-6000.0.22f1.pkg

    - task: CmdLine@2
      displayName: 'Activate Unity'
      inputs:
        script: |
          LICENSE_FILE='/Library/Application Support/Unity/Unity_lic.ulf'
          UNITY_CMD="$UNITY_PATH -batchmode -createManualActivationFile -verbose -username $(USERNAME) -password $(PASSWORD) -logfile"

          bash -c "$UNITY_CMD"
          REQUEST_XML=$(cat *.alf)
          echo "REQUEST: "$REQUEST_XML

          BODY='{"grant_type":"password", "username":"'"$(USERNAME)"'", "password":"'"$(PASSWORD)"'"}'
          access_token=$(curl -s -S\
              -H "Accept: application/json" \
              -H "Content-Type:application/json" \
              -X POST -d "$BODY" "https://core.cloud.unity3d.com/api/login" | \
              jq -r '.access_token')

          echo "LOGIN: "$(curl -s -S\
              -H "Authorization: Bearer $access_token" \
              "https://core.cloud.unity3d.com/api/users/me")

          TX=$(uuidgen | sha1sum | tr '[:upper:]' '[:lower:]' | awk '{print toupper($1)}')
          echo "TX: $TX"

          transaction_raw=$(curl -s -S\
              -H "Authorization: Bearer $access_token" \
              -H "Content-Type:text/xml" \
              -X POST -d "${REQUEST_XML}" "https://license.unity3d.com/update/poll?cmd=9&tx_id=$TX")
          transaction=$(echo "$transaction_raw" | sed -n 's/.*<Answered>\(.*\)<\/Answered>$/\1/p')

          if [ "$transaction" != "true" ]; then
              echo "ERROR: Transaction not allowed, $transaction_raw"
              exit 1
          fi

          BODY='{"transaction": {"serial": {"type":"personal"}}}'
          RX=$(curl -s -S\
              -H "Authorization: Bearer $access_token" \
              -H "Content-Type:application/json" \
              -X PUT -d "$BODY" "https://license.unity3d.com/api/transactions/$TX" | jq -r '.transaction.rx')
          echo "RX: $RX"

          curl -s -S\
              -H "Authorization: Bearer $access_token" \
              -H "Content-Type:text/xml" \
              -X POST -d "${REQUEST_XML}" "https://activation.unity3d.com/license.fcgi?CMD=9&TX=$TX&RX=$RX" > "$LICENSE_FILE"

          if test -f "$LICENSE_FILE"; then
              echo "LICENSE: $LICENSE_FILE"
          else
              echo "ERROR: Does not exist $LICENSE_FILE"
              exit 2
          fi
          #cat "$LICENSE_FILE"

    - task: CmdLine@2
      displayName: 'Install Android NDK r23b'
      inputs:
        script: |
          curl -O https://dl.google.com/android/repository/android-ndk-r23b-darwin.zip
          sudo unzip -q android-ndk-r23b-darwin.zip -d "${ANDROID_HOME}"
          
          sudo rm -fr "${ANDROID_NDK_HOME}"
          sudo ln -s "${ANDROID_HOME}/android-ndk-r23b" "${ANDROID_NDK_HOME}"

    - task: JavaToolInstaller@0
      displayName: 'Use Java 17'
      inputs:
        versionSpec: 17
        jdkArchitectureOption: x64
        jdkSourceOption: PreInstalled

    - task: DownloadSecureFile@1
      name: keystore
      displayName: 'Get Keystore'
      inputs:
        secureFile: myapp.keystore

    - task: CmdLine@2
      displayName: 'Unity Build Android'
      inputs:
        script: |
          APK_OUTPUT_DIR="build"
          if [ -d "${APK_OUTPUT_DIR}" ]
          then
              rm -fr "${APK_OUTPUT_DIR}"
          fi
          mkdir "${APK_OUTPUT_DIR}"
          
          #Copy keystore
          cp "$(keystore.secureFilePath)" ./
          UNITY_CMD="$UNITY_PATH -buildTarget android -projectPath ./ -batchmode -executeMethod BuildTool.BuildAndroid -outputPath $APK_OUTPUT_DIR -buildNumber $(Build.BuildNumber) -logfile -"
          bash -c "$UNITY_CMD"
      env:
        ANDROID_KEYSTORE_NAME: $(KeystoreName)
        ANDROID_KEYSTORE_PASSWORD: $(KeystorePassword)
        ANDROID_KEYALIAS_NAME: $(KeyaliasName)
        ANDROID_KEYALIAS_PASSWORD: $(KeyaliasPassword)

    - publish: 'build'
      artifact: Release
